What happens when you initialize a repository? Why do you need to do it?

Initializing a repository sets it up to be used by/with git. Adding the .git folder 
which would allow for cloning and committing changes and allowing tracking of file 
changes. You need to do it for the availability of version control and so git 
would know the directory as a working one and to follow the changes made to the 
project.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is a place for changes to be made can wait until they are ready 
to be committed. The working directory will already have the changes made, while
the repository will be waiting for changes. The staging area allows to to pick
and choose what will be committed.

How can you use the staging area to make sure you have one commit per logical change?

As long as you know the files you have changed you can stage only the files that have
changes that make a logical commit and commit those while leaving other changed files
for another commit.

What are some situations when branches would be heplful in keeping your history
organized? How would branches help?

Branches would be heplful when adding features or making any large changes that might
not work as intended. That way one can have a stable branch and an experimental one.
Branches also facilitate remembering what branches are what and where the commits belong
by giving us user-friendly labels instead of trying to keep track of computer-generated
commit IDs.

How do the diagrams help you visualize the branch structure?

It is easier than the list that git log provides to see how the different commits are 
connected and how they would relate to one another. It also makes it easier to see 
where the name branch came from. You can see the root at the start of project and the 
varying routs it took to get to where it is.

What is the result of merging two branches together? Why do we represent it in the 
diagram the way we do?

Merging two branches together allows us to see and get to the commits from both
branches while making the current commit be a project with all changes incorporated.
The diagram converges on the merging commit showing that the new branch tip is at 
the master branch and the previous branch is no longer active.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Pros: allows for faster workflow where conflict free mergers can be completed quickly.

Cons: it cannot know all of the intended changes and needs further research to reslove
conflicts.

